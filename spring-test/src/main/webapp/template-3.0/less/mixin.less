/**
 * mixin.less
 * A set of useful LESS mixins
 */

// Dimension, measured by width and height
// --------------------------------
.size(@w, @h) {
  width  : @w;
  height : @h;
}

// Full size
// --------------------------------
.full-size() {
  position : absolute;
  left     : 0;
  top      : 0;
  width    : 100%;
  height   : 100%;
}

// Border box
// --------------------------------
.border-box() {
  -webkit-box-sizing : border-box;
  -moz-box-sizing    : border-box;
  box-sizing         : border-box;
}

// Border radius with different arguments
// --------------------------------
.border-radius(@topleft: 0, @topright: 0, @bottomright: 0, @bottomleft: 0) {
  -webkit-border-top-left-radius     : @topleft;
  -webkit-border-top-right-radius    : @topright;
  -webkit-border-bottom-right-radius : @bottomright;
  -webkit-border-bottom-left-radius  : @bottomleft;
  -moz-border-radius-topleft         : @topleft;
  -moz-border-radius-topright        : @topright;
  -moz-border-radius-bottomright     : @bottomright;
  -moz-border-radius-bottomleft      : @bottomleft;
  border-top-left-radius             : @topleft;
  border-top-right-radius            : @topright;
  border-bottom-right-radius         : @bottomright;
  border-bottom-left-radius          : @bottomleft;
  .background-clip(padding-box);
}

// Border radius with the same argument
// --------------------------------
.rounded(@radius: 3px) {
  -webkit-border-radius   : @radius;
  -moz-border-radius      : @radius;
  border-radius           : @radius;
  .background-clip(padding-box);
}

// Box shadow default
// --------------------------------
.box-shadow(@arguments) {
  -webkit-box-shadow : @arguments;
  -moz-box-shadow    : @arguments;
  box-shadow         : @arguments;
}

// Box shadow
// --------------------------------
.drop-shadow(@horizontal: 0, @vertical: 1px, @blur: 2px, @alpha: 0.1) {
  -webkit-box-shadow : @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
  -moz-box-shadow    : @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
  box-shadow         : @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
}

// Box shadow inset
// --------------------------------
.inner-shadow(@horizontal: 0, @vertical: 1px, @blur: 2px, @alpha: 0.4) {
  -webkit-box-shadow : inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
  -moz-box-shadow    : inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
  box-shadow         : inset @horizontal @vertical @blur rgba(0, 0, 0, @alpha);
}

// Box inner border
// --------------------------------
.inner-border(@width: 1px, @color: #000) {
  -webkit-box-shadow : inset 0 0 0 @width @color;
  -moz-box-shadow    : inset 0 0 0 @width @color;
  box-shadow         : inset 0 0 0 @width @color;
}

// Background clipping
// @arguments: border-box, content-box, padding-box
// --------------------------------
.background-clip(@arguments) {
  -webkit-background-clip : @arguments;
  -moz-background-clip    : @arguments;
  background-clip         : @arguments;
}

// Opacity
// --------------------------------
.opacity(@opacity) {
  opacity    : @opacity;
  @opacityIE : @opacity * 100;
  filter     : ~"alpha(opacity=@{opacityIE})";
}

// Appearance
// --------------------------------
.appearance(@appearance: none) {
  -webkit-appearance : @appearance;
  appearance         : @appearance;
}

// Controls the selection model of an element.
// --------------------------------
.user-select(@arguments: none){
  -webkit-user-select : @arguments;
  -moz-user-select    : @arguments;
  -ms-user-select     : @arguments;
  user-select         : @arguments;
}

// Controls horizontal & vertical scrollbar
// --------------------------------
.scrollable() {
  overflow                   : auto;
  -webkit-overflow-scrolling : touch;
}

// Gradient
// --------------------------------
.gradient(@start: #000000, @stop: #FFFFFF) {
  background : (@start + @stop)/2;
  background : -webkit-gradient(linear, left top, left bottom, color-stop(0, @start), color-stop(1, @stop));
  background : -moz-linear-gradient(center top, @start 0%, @stop 100%);
  background : -ms-linear-gradient(top, @start, @stop);
  filter     : e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@start,@stop));
}

// Animation
// --------------------------------
.animation(@animation) {
  -webkit-animation : @animation;
  -moz-animation    : @animation;
  animation         : @animation;
}

.transition(@transition) {
  -webkit-transition : @transition;
  -moz-transition    : @transition;
  transition         : @transition;
}

.transition-delay(@transition-delay) {
  -webkit-transition-delay : @transition-delay;
  -moz-transition-delay    : @transition-delay;
  transition-delay         : @transition-delay;
}

.transition-duration(@transition-duration) {
  -webkit-transition-duration : @transition-duration;
  -moz-transition-duration    : @transition-duration;
  transition-duration         : @transition-duration;
}

// Transform
// --------------------------------
.transform(...) {
  -webkit-transform : @arguments;
  -moz-transform    : @arguments;
  -ms-transform     : @arguments;
  transform         : @arguments;
}

// Transform rotation
// --------------------------------
.rotation(@deg: 5deg) {
  .transform(rotate(@deg));
}

// Transform scale
// --------------------------------
.scale(@ratio: 1.5) {
  .transform(scale(@ratio));
}

// Translate
// --------------------------------
.translate(@x: 0, @y: 0) {
  .transform(translate(@x, @y));
}

// Translate3d
// --------------------------------
.translate3d(@x, @y, @z) {
  .transform(translate3d(@x, @y, @z));
}

// Preserve3D
// --------------------------------
.preserve3d() {
  -webkit-transform-style : preserve-3d;
  -moz-transform-style    : preserve-3d;
  -ms-transform-style     : preserve-3d;
  transform-style         : preserve-3d;
}

// CSS columns
// --------------------------------
.columns(@colwidth: 250px, @colcount: 0, @colgap: 50px, @columnRuleColor: #EEE, @columnRuleStyle: solid, @columnRuleWidth: 1px) {
  -moz-column-width         : @colwidth;
  -moz-column-count         : @colcount;
  -moz-column-gap           : @colgap;
  -moz-column-rule-color    : @columnRuleColor;
  -moz-column-rule-style    : @columnRuleStyle;
  -moz-column-rule-width    : @columnRuleWidth;
  -webkit-column-width      : @colwidth;
  -webkit-column-count      : @colcount;
  -webkit-column-gap        : @colgap;
  -webkit-column-rule-color : @columnRuleColor;
  -webkit-column-rule-style : @columnRuleStyle;
  -webkit-column-rule-width : @columnRuleWidth;
  column-width              : @colwidth;
  column-count              : @colcount;
  column-gap                : @colgap;
  column-rule-color         : @columnRuleColor;
  column-rule-style         : @columnRuleStyle;
  column-rule-width         : @columnRuleWidth;
}

// Import font
// --------------------------------
.font-face(@fontFamily, @fileName, @style, @weight) {
  @font-face{
    font-family: @fontFamily;
    font-style: @style;
    font-weight: @weight;
    -webkit-font-smoothing: antialiased;
    -webkit-text-stroke-width: 0.2px;
    src: url('@{fileName}.eot');
    src: local('@fontFamily'), url('@{fileName}.eot?#iefix') format('embedded-opentype'), url('@{fileName}.woff') format('woff'), url('@{fileName}.ttf') format('truetype'), url('@{fileName}.svg#@{fontFamily}') format('svg'), url("@{fileName}.otf") format('opentype');
  }
}

// Clearfix
// --------------------------------
.clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// CSS image replacement
// --------------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
.hide-text() {
  font:0/0 a;
  color:transparent;
  text-shadow:none;
  background-color:transparent;
  border:0;
}

// Force line breaks
// --------------------------------
.word-break() {
  word-break  : break-all;
  word-wrap   : break-word;
  white-space : normal;
}

// No wrap
// --------------------------------
.no-wrap() {
  word-break  : normal;
  word-wrap   : normal;
  white-space : nowrap;
}

// Text overflow with(...)
// --------------------------------
// Requires inline-block or block for proper styling
.text-overflow() {
  max-width     : 100%;
  overflow      : hidden;
  text-overflow : ellipsis;
  white-space   : nowrap;
}

.line-overflow(@line) {
  overflow           : hidden;
  text-overflow      : ellipsis;
  display            : -webkit-box;
  -webkit-line-clamp : @line; /* number of lines to show */
  -webkit-box-orient : vertical;
}

// Flexbox layout
// --------------------------------
.flexbox() {
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
.flex(@values) {
  -webkit-box-flex:@values;
  -moz-box-flex: @values;
  -webkit-flex: @values;
  -ms-flex: @values;
  flex: @values;
}
.flex-nowrap() {
  -webkit-box-lines : single;
  -moz-box-lines    : single;
  -webkit-flex-wrap : nowrap;
  -ms-flex-wrap     : none;
  -ms-flex-wrap     : nowrap;
  flex-wrap         : nowrap;
}

.flex-wrap() {
  -webkit-box-lines : multiple;
  -moz-box-lines    : multiple;
  -webkit-flex-wrap : wrap;
  -ms-flex-wrap     : wrap;
  flex-wrap         : wrap;
}

.flex-wrap-reverse() {
  -webkit-flex-wrap : wrap-reverse;
  -ms-flex-wrap     : wrap-reverse;
  flex-wrap         : wrap-reverse;
}

.flex-shrink(@fs) {
  -webkit-flex-shrink : @fs;
  -ms-flex            : 0 @fs auto;
  flex-shrink         : @fs;
}

.justify-content(@jc) when (@jc = flex-start) {
  -webkit-box-pack        : start;
  -ms-flex-pack           : start;
  -webkit-justify-content : flex-start;
  justify-content         : flex-start;
}

.justify-content(@jc) when (@jc = flex-end) {
  -webkit-box-pack        : end;
  -ms-flex-pack           : end;
  -webkit-justify-content : flex-end;
  justify-content         : flex-end;
}

.justify-content(@jc) when (@jc = space-between) {
  -webkit-box-pack        : justify;
  -ms-flex-pack           : justify;
  -webkit-justify-content : space-between;
  justify-content         : space-between;
}

.justify-content(@jc) when not (@jc = flex-start) and not (@jc = flex-end) and not (@jc = space-between) {
  -webkit-box-pack        : @jc;
  -ms-flex-pack           : @jc;
  -webkit-justify-content : @jc;
  justify-content         : @jc;
}

.align-items(@ai) when (@ai = flex-start) {
  -webkit-box-align   : start;
  -ms-flex-align      : start;
  -webkit-align-items : flex-start;
  align-items         : flex-start;
}

.align-items(@ai) when (@ai = flex-end) {
  -webkit-box-align   : end;
  -ms-flex-align      : end;
  -webkit-align-items : flex-end;
  align-items         : flex-end;
}

.align-items(@ai) when not (@ai = flex-start) and not (@ai = flex-end) {
  -webkit-box-align   : @ai;
  -ms-flex-align      : @ai;
  -webkit-align-items : @ai;
  align-items         : @ai;
}

.align-content(@ai) {
  -ms-flex-line-pack    : @ai;
  -webkit-align-content : @ai;
  align-content         : @ai;
}

.align-self(@as) {
  -ms-flex-item-align : @as;
  -webkit-align-self  : @as;
  align-self          : @as;
}

// Encoded SVG Background
// --------------------------------
.encoded-svg-background(@svg) {
  @url: `encodeURIComponent(@{svg})`;
  background-image: url("data:image/svg+xml;charset=utf-8,@{url}");
}

// Triangle
// --------------------------------
.triangle(@direction: down, @size: 10px, @color: #000) {
  display     : inline-block;
  width       : 0;
  height      : 0;
  font-size   : 0;
  line-height : 0;
  overflow    : hidden;
}

.triangle(@direction: down, @size: 10px, @color: #000) when (@direction = down) {
  border-color: @color transparent transparent transparent;
  border-style: solid dashed dashed dashed;
  border-width: @size @size 0 @size;
}

.triangle(@direction: down, @size: 10px, @color: #000) when (@direction = left) {
  border-color: transparent @color transparent transparent;
  border-style: dashed solid dashed dashed;
  border-width: @size @size @size 0;
}

.triangle(@direction: down, @size: 10px, @color: #000) when (@direction = up) {
  border-color: transparent transparent @color transparent;
  border-style: dashed dashed solid dashed;
  border-width: 0 @size @size @size;
}

.triangle(@direction: down, @size: 10px, @color: #000) when (@direction = right) {
  border-color: transparent transparent transparent @color;
  border-style: dashed dashed dashed solid;
  border-width: @size 0 @size @size;
}

// Arrow
// --------------------------------
.arrow(@direction: down, @size: 10px, @color: #000, @borderColor: #c00) {
  position  : absolute;
  width     : 0;
  height    : 0;
  font-size : 0;
  &:after {
    content   : " ";
    position  : absolute;
    width     : 0;
    height    : 0;
    font-size : 0;
  }
}

.arrow(@direction: down, @size: 10px, @color: #fff, @borderColor: #ccc) when (@direction = down) {
  border-color: @borderColor transparent transparent transparent;
  border-style: solid dashed dashed dashed;
  border-width: @size @size 0 @size;
  &:after{
    left: -@size;
    top: -(@size+1);
    border-color: @color transparent transparent transparent;
    border-style: solid dashed dashed dashed;
    border-width: @size @size 0 @size;
  }
}

.arrow(@direction: down, @size: 10px, @color: #fff, @borderColor: #ccc) when (@direction = left) {
  border-color: transparent @borderColor transparent transparent;
  border-style: dashed solid dashed dashed;
  border-width: @size @size @size 0;
  &:after{
    left: 1px;
    top: -@size;
    border-color: transparent @color transparent transparent;
    border-style: dashed solid dashed dashed;
    border-width: @size @size @size 0;
  }
}

.arrow(@direction: down, @size: 10px, @color: #fff, @borderColor: #ccc) when (@direction = up) {
  border-color: transparent transparent @borderColor transparent;
  border-style: dashed dashed solid dashed;
  border-width: 0 @size @size @size;
  &:after{
    left: -@size;
    top: 1px;
    border-color: transparent transparent @color transparent;
    border-style: dashed dashed solid dashed;
    border-width: 0 @size @size @size;
  }
}

.arrow(@direction: down, @size: 10px, @color: #fff, @borderColor: #ccc) when (@direction = right) {
  border-color: transparent transparent transparent @borderColor;
  border-style: dashed dashed dashed solid;
  border-width: @size 0 @size @size;
  &:after{
    left: -(@size+1);
    top: -@size;
    border-color: transparent transparent transparent @color;
    border-style: dashed dashed dashed solid;
    border-width: @size 0 @size @size;
  }
}


.flex-flow(@al:column){
  flex-flow: @al;
  -webkit-flex-flow: @al;
}
